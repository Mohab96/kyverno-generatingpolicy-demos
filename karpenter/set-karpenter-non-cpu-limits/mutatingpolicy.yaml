apiVersion: policies.kyverno.io/v1alpha1
kind: MutatingPolicy
metadata:
  name: set-karpenter-non-cpu-limits
  annotations:
    policies.kyverno.io/title: Set non-CPU limits for pods to work well with Karpenter.
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/category: Karpenter, EKS Best Practices
    policies.kyverno.io/severity: medium
    kyverno.io/kyverno-version: 1.9.3
    kyverno.io/kubernetes-version: "1.26"
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/description: >-
      For correct node provisioning Karpenter should know exactly what the non-CPU resources are 
      that the pods will need. Otherwise Karpenter will put as many pods on a node as possible, 
      which may lead to memory pressure on nodes. This is especially important in consolidation 
      mode.
spec:
  matchConstraints:
    resourceRules:
    - apiGroups: [""]
      apiVersions: ["v1"]
      resources: ["pods"]
      operations: ["CREATE", "UPDATE"]
  reinvocationPolicy: Never
  mutations:
  - patchType: ApplyConfiguration
    applyConfiguration:
      expression: >
        Object{
          spec: Object.spec{
            containers: object.spec.containers.map(container, 
              Object.spec.containers{
                name: container.name,
                resources: Object.spec.containers.resources{
                  limits: Object.spec.containers.resources.limits{
                    "ephemeral-storage": has(container.resources) && has(container.resources.limits) && has(container.resources.limits["ephemeral-storage"]) ? 
                      container.resources.limits["ephemeral-storage"] :
                      (has(container.resources) && has(container.resources.requests) && has(container.resources.requests["ephemeral-storage"]) ? 
                        container.resources.requests["ephemeral-storage"] : "1Gi"),
                    memory: has(container.resources) && has(container.resources.limits) && has(container.resources.limits.memory) ? 
                      container.resources.limits.memory :
                      (has(container.resources) && has(container.resources.requests) && has(container.resources.requests.memory) ? 
                        container.resources.requests.memory : "128Mi")
                  },
                  requests: Object.spec.containers.resources.requests{
                    "ephemeral-storage": has(container.resources) && has(container.resources.limits) && has(container.resources.limits["ephemeral-storage"]) ? 
                      container.resources.limits["ephemeral-storage"] :
                      (has(container.resources) && has(container.resources.requests) && has(container.resources.requests["ephemeral-storage"]) ? 
                        container.resources.requests["ephemeral-storage"] : "1Gi"),
                    memory: has(container.resources) && has(container.resources.limits) && has(container.resources.limits.memory) ? 
                      container.resources.limits.memory :
                      (has(container.resources) && has(container.resources.requests) && has(container.resources.requests.memory) ? 
                        container.resources.requests.memory : "128Mi")
                  }
                }
              }
            )
          }
        }