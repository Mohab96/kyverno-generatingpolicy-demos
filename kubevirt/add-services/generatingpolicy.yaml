apiVersion: policies.kyverno.io/v1alpha1
kind: GeneratingPolicy
metadata:
  name: k6t-add-services
  annotations:
    policies.kyverno.io/title: Add Services
    policies.kyverno.io/category: KubeVirt
    policies.kyverno.io/subject: VirtualMachineInstance
    policies.kyverno.io/description: >-
      Add an SSH Service to every VirtualMachineInstance which is getting created.
      This Service will use a ClusterIP, thus the admin has to ensure that the IP
      space is large enough and ClusterIP type can be met.
    kyverno.io/kyverno-version: "1.15.0"
    kyverno.io/kubernetes-version: "1.24-1.25"
spec:
  evaluation:
    synchronize:
      enabled: true
    generateExisting:
      enabled: false
  matchConstraints:
    resourceRules:
    - apiGroups: ["kubevirt.io"]
      apiVersions: ["v1"]
      operations: ["CREATE"]
      resources: ["virtualmachineinstances"]
  variables:
    - name: vmiName
      expression: "object.metadata.name"
    - name: vmiNamespace
      expression: "object.metadata.namespace"
    - name: vmiUID
      expression: "object.metadata.uid"
    - name: sshService
      expression: >-
        [
          {
            "kind": dyn("Service"),
            "apiVersion": dyn("v1"),
            "metadata": dyn({
              "name": string(variables.vmiName),
              "namespace": string(variables.vmiNamespace),
              "ownerReferences": dyn([
                {
                  "apiVersion": "kubevirt.io/v1",
                  "kind": "VirtualMachineInstance",
                  "name": string(variables.vmiName),
                  "uid": string(variables.vmiUID)
                }
              ])
            }),
            "spec": dyn({
              "ports": dyn([
                {
                  "protocol": "TCP",
                  "port": 22
                }
              ]),
              "selector": dyn({
                "kubevirt.io/domain": string(variables.vmiName)
              }),
              "type": "ClusterIP"
            })
          }
        ]
  generate:
    - expression: generator.Apply(variables.vmiNamespace, variables.sshService)